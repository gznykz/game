{"version":3,"sources":["const/ActionTypes.js","reducers/UserReducer.js","reducers/index.js","store/index.js","actions/UserAction.js","services/ApiService.js","components/App/App.jsx","components/App/index.js","components/Button/index.js","components/Button/Button.jsx","components/Game/components/Card/Card.jsx","components/Game/components/Card/index.js","components/Game/components/GameInfo/components/RulesModal/RulesModal.jsx","components/Game/components/GameInfo/components/RulesModal/index.js","components/Game/components/GameInfo/index.js","components/Game/components/GameInfo/GameInfo.jsx","components/Game/components/GameMat/index.js","components/Game/components/GameMat/GameMat.jsx","components/Game/components/HandCards/index.js","components/Game/components/HandCards/HandCards.jsx","components/Game/components/PlayerInfo/index.js","components/Game/components/PlayerInfo/PlayerInfo.jsx","components/Game/components/PlayerProfile/index.js","components/Game/components/PlayerProfile/PlayerProfile.jsx","components/Game/components/Resolution/index.js","components/Game/components/Resolution/Resolution.jsx","components/Game/Game.jsx","components/Game/index.js","components/Login/Login.jsx","components/Login/index.js","index.js"],"names":["ActionTypes","initialState","name","win_count","lost_count","game","combineReducers","user","state","arguments","length","undefined","action","type","Object","assign","composedEnhancers","compose","apply","store","createStore","rootReducer","UserAction","_ref","takeAction","_callee2","dataValue","privateKey","rpc","signatureProvider","api","resultWithConfig","regenerator_default","a","wrap","_context2","prev","next","localStorage","getItem","JsonRpc","process","JsSignatureProvider","Api","textDecoder","TextDecoder","textEncoder","TextEncoder","transact","actions","account","authorization","actor","permission","data","blocksBehind","expireSeconds","sent","abrupt","t0","stop","ApiService","Promise","resolve","reject","username","then","catch","err","removeItem","key","setItem","cardIdx","player_card_idx","get_table_rows","json","code","scope","table","limit","lower_bound","result","rows","console","error","_context","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","getCurrentUser","bind","assertThisInitialized","_this2","setUser","finally","setState","_this$props$user","appStatus","status","selected_card_ai","deck_ai","react_default","createElement","className","concat","components_Game","components_Login","Component","mapDispatchToProps","connect","Button","handleClick","onClick","promise","isComponentMounted","_this$props","style","children","cardDict","Card","cardId","Tag","cardType","Modal","setAppElement","RulesModal","modalIsOpen","openModal","closeModal","components_Button","lib_default","isOpen","onRequestClose","overlayClassName","GameInfo","deckCardCount","handCardCount","onEndGame","components_RulesModal","GameMat","aiLife","aiHandCards","aiName","playerLife","playerHandCards","playerName","onPlayCard","components_PlayerInfo","life","components_HandCards","cards","HandCards","elems","_loop","i","cardProperties","push","components_Card","generateCards","PlayerInfo","PlayerProfile","winCount","lostCount","onStartGame","Resolution","aiCard","aiLost","playerCard","playerLost","onNextRound","isCardSelected","aiRoundResult","playerRoundResult","Game","loadUser","handleStartGame","handlePlayCard","handleNextRound","handleEndGame","getUserByName","game_data","_this3","startGame","_this4","hand_player","playCard","_this5","nextRound","_this6","endGame","isGameStarted","components_GameMat","life_ai","hand_ai","life_player","components_Resolution","life_lost_ai","selected_card_player","life_lost_player","components_GameInfo","filter","x","components_PlayerProfile","onLogout","handleLogout","Login","form","isSigningIn","handleChange","handleSubmit","event","_objectSpread2","_event$target","target","value","objectSpread","defineProperty","preventDefault","login","toString","_this$state","onSubmit","placeholder","onChange","pattern","required","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.398ebfa5.chunk.js","sourcesContent":["/**\n * List all Action types used in the application\n */\nexport default {\n\n  SET_USER: 'SET_USER',\n\n}\n","import { ActionTypes } from 'const';\n\nconst initialState = {\n  name: \"\",\n  win_count: 0,\n  lost_count: 0,\n  game: null,\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ActionTypes.SET_USER: {\n      return Object.assign({}, state, {\n        // If the name is not specified, do not change it\n        // The places that will change the name is login\n        // In that cases, the `win_count`, `lost_count`, `game` will be reset\n        name: typeof action.name === \"undefined\" ? state.name : action.name,\n        win_count: action.win_count || initialState.win_count,\n        lost_count: action.lost_count || initialState.lost_count,\n        game: action.game || initialState.game,\n      });\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport UserReducer from './UserReducer';\n\nexport default combineReducers({\n  user: UserReducer,\n})\n","import { createStore, compose } from 'redux';\nimport rootReducer from 'reducers';\n\nconst initialState = {};\nconst enhancers = [];\n\n// DevTools Extension for debugging in Chrome\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.devToolsExtension;\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  ...enhancers\n)\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composedEnhancers\n)\n\nexport default store;\n","import { ActionTypes } from 'const';\n\nclass UserAction {\n\n  static setUser({ name, win_count, lost_count, game }) {\n    return {\n      type: ActionTypes.SET_USER,\n      name,      // User name\n      win_count, // Users win count\n      lost_count,// Users lost count\n      game,      // Users current Gamestate\n    }\n  }\n\n}\n\nexport default UserAction;\n","import { Api, JsonRpc } from 'eosjs';\nimport JsSignatureProvider from 'eosjs/dist/eosjs-jssig'\n\n// Main action call to blockchain\nasync function takeAction(action, dataValue) {\n  const privateKey = localStorage.getItem(\"cardgame_key\");\n  const rpc = new JsonRpc(process.env.REACT_APP_EOS_HTTP_ENDPOINT);\n  const signatureProvider = new JsSignatureProvider([privateKey]);\n  const api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n\n  // Main call to blockchain after setting action, account_name and data\n  try {\n    const resultWithConfig = await api.transact({\n      actions: [{\n        account: process.env.REACT_APP_EOS_CONTRACT_NAME,\n        name: action,\n        authorization: [{\n          actor: localStorage.getItem(\"cardgame_account\"),\n          permission: 'active',\n        }],\n        data: dataValue,\n      }]\n    }, {\n      blocksBehind: 3,\n      expireSeconds: 30,\n    });\n    return resultWithConfig;\n  } catch (err) {\n    throw(err)\n  }\n}\n\nclass ApiService {\n\n  static getCurrentUser() {\n    return new Promise((resolve, reject) => {\n      if (!localStorage.getItem(\"cardgame_account\")) {\n        return reject();\n      }\n      takeAction(\"login\", { username: localStorage.getItem(\"cardgame_account\") })\n        .then(() => {\n          resolve(localStorage.getItem(\"cardgame_account\"));\n        })\n        .catch(err => {\n          localStorage.removeItem(\"cardgame_account\");\n          localStorage.removeItem(\"cardgame_key\");\n          reject(err);\n        });\n    });\n  }\n\n  static login({ username, key }) {\n    return new Promise((resolve, reject) => {\n      localStorage.setItem(\"cardgame_account\", username);\n      localStorage.setItem(\"cardgame_key\", key);\n      takeAction(\"login\", { username: username })\n        .then(() => {\n          resolve();\n        })\n        .catch(err => {\n          localStorage.removeItem(\"cardgame_account\");\n          localStorage.removeItem(\"cardgame_key\");\n          reject(err);\n        });\n    });\n  }\n\n  static startGame() {\n    return takeAction(\"startgame\", { username: localStorage.getItem(\"cardgame_account\") });\n  }\n\n  static playCard(cardIdx) {\n    return takeAction(\"playcard\", { username: localStorage.getItem(\"cardgame_account\"), player_card_idx: cardIdx });\n  }\n\n  static nextRound() {\n    return takeAction(\"nextround\", { username: localStorage.getItem(\"cardgame_account\") });\n  }\n\n  static endGame() {\n    return takeAction(\"endgame\", { username: localStorage.getItem(\"cardgame_account\") });\n  }\n\n  static async getUserByName(username) {\n    try {\n      const rpc = new JsonRpc(process.env.REACT_APP_EOS_HTTP_ENDPOINT);\n      const result = await rpc.get_table_rows({\n        \"json\": true,\n        \"code\": process.env.REACT_APP_EOS_CONTRACT_NAME,    // contract who owns the table\n        \"scope\": process.env.REACT_APP_EOS_CONTRACT_NAME,   // scope of the table\n        \"table\": \"users\",    // name of the table as specified by the contract abi\n        \"limit\": 1,\n        \"lower_bound\": username,\n      });\n      return result.rows[0];\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n}\n\nexport default ApiService;\n","// React core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Components\nimport { Game, Login } from 'components';\n// Services and redux action\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass App extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // State for showing/hiding components when the API (blockchain) request is loading\n    this.state = {\n      loading: true,\n    };\n    // Bind functions\n    this.getCurrentUser = this.getCurrentUser.bind(this);\n    // Call getCurrentUser before mounting the app\n    this.getCurrentUser();\n  }\n\n  getCurrentUser() {\n    // Extract setUser of UserAction from redux\n    const { setUser } = this.props;\n    // Send a request to API (blockchain) to get the current logged in user\n    return ApiService.getCurrentUser()\n      // If the server return a username\n      .then(username => {\n        // Save the username to redux store\n        // For structure, ref: ./frontend/src/reducers/UserReducer.js\n        setUser({ name: username });\n      })\n      // To ignore 401 console error\n      .catch(() => {})\n      // Run the following function no matter the server return success or error\n      .finally(() => {\n        // Set the loading state to false for displaying the app\n        this.setState({ loading: false });\n      });\n  }\n\n  render() {\n    // Extract data from state and props (`user` is from redux)\n    const { loading } = this.state;\n    const { user: { name, game } } = this.props;\n\n    // Determine the app status for styling\n    let appStatus = \"login\";\n    if (game && game.status !== 0) {\n      appStatus = \"game-ended\";\n    } else if (game && game.selected_card_ai > 0) {\n      appStatus = \"card-selected\";\n    } else if (game && game.deck_ai.length !== 17) {\n      appStatus = \"started\";\n    } else if (name) {\n      appStatus = \"profile\";\n    }\n\n    // Set class according to loading state, it will hide the app (ref to css file)\n    // If the username is set in redux, display the Game component\n    // If the username is NOT set in redux, display the Login component\n    return (\n      <div className={ `App status-${ appStatus }${ loading ? \" loading\" : \"\" }` }>\n        { name && <Game /> }\n        { !name && <Login /> }\n      </div>\n    );\n  }\n\n}\n\n// Map all state to component props (for redux to connect)\nconst mapStateToProps = state => state;\n\n// Map the following action to props\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser,\n};\n\n// Export a redux connected component\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import './reset.css';\nimport './App.css';\n\nimport App from './App';\n\nexport default App;\n","import './Button.css';\nimport Button from './Button';\nexport default Button;\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // Component state setup\n    this.state = {\n      loading: false,\n    };\n    // Bind functions\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    const { onClick } = this.props;\n    // Show the loading indicator in case the action to be performed takes too long\n    this.setState({ loading: true });\n\n    // If the prop onClick is a function, invoke it and stores its return value in ``promise``\n    // If the prop onClick is NOT a function, the value of ``promise`` will be false\n    const promise = typeof onClick === \"function\" && onClick();\n\n    // If ``promise`` is a function (a Promise), invoke setState after it has been resolved.\n    if (promise && typeof promise.then === \"function\") {\n      return promise.then(() => {\n        this.isComponentMounted && this.setState({ loading: false });\n      });\n    }\n    // Otherwise, just invoke setState directly\n    this.isComponentMounted && this.setState({ loading: false });\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  render() {\n    const { className, type, style, children } = this.props;\n    let { loading } = this.state;\n    // Enable the loading CSS class if either the private state attribute `loading`\n    // or the props `loading` is true\n    loading = loading || this.props.loading;\n    return (\n      <button\n        className={`Button${ className ? ' ' + className : '' }${ loading ? ' loading' : '' }`}\n        onClick={ this.handleClick }\n        { ...{ type, style } }\n      >{ children }</button>\n    );\n  }\n\n}\n\nexport default Button;\n","import React, { Component } from 'react';\n\n// Card dictionary from smart contract\n// { [cardType, cardPower], ... }\nconst cardDict = [\n  [0, 0], // empty card (for the case the card is played or empty selected card)\n  [1, 1], [1, 1],\n  [1, 2], [1, 2],\n  [1, 3],\n  [2, 1], [2, 1],\n  [2, 2], [2, 2],\n  [2, 3],\n  [3, 1], [3, 1],\n  [3, 2], [3, 2],\n  [3, 3],\n  [4, 3],\n  [5, 0]\n];\n\nclass Card extends Component {\n  render() {\n    // Extract card index (cardId) and onClick event function from props\n    const { cardId, onClick } = this.props;\n    // If it is not an empty card and onClick is set, set Tag as <a>, <div> otherwise\n    const Tag = cardId !== 0 && onClick ? `a` : `span`;\n    // Determine the card element\n    let cardType = \"\";\n    switch (cardDict[cardId][0]) {\n      case 1:\n        cardType = \"FIRE\";\n        break;\n      case 2:\n        cardType = \"WOOD\";\n        break;\n      case 3:\n        cardType = \"WATER\";\n        break;\n      case 4:\n      case 5:\n        cardType = \"SPECIAL\";\n        break;\n      default:\n        cardType = \"EMPTY\";\n    }\n    return (\n      <Tag\n        className={ `Card ${ \"type\" + cardDict[cardId][0] } ${ \"card\" + cardId }` }\n        onClick={ onClick }>\n        <span className=\"type\">{ cardType }</span>\n        <span className=\"power\">{ cardId !== 0 && cardDict[cardId][1] }</span>\n      </Tag>\n    )\n  }\n}\n\nexport default Card;\n","import './Card.css';\nimport Card from './Card';\nexport default Card;\n","import React, { Component } from 'react';\nimport Modal from 'react-modal';\n// Components\nimport { Button } from 'components';\n\nModal.setAppElement('#root');\n\nclass RulesModal extends Component {\n  constructor() {\n    // Inherit constructor\n    super();\n    // State for showing/hiding the modal\n    this.state = {\n      modalIsOpen: false,\n    }\n    // Bind functions\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({ modalIsOpen: true });\n  }\n\n  closeModal() {\n    this.setState({ modalIsOpen: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button onClick={ this.openModal } className=\"small blue\">RULES</Button>\n        <Modal\n          isOpen={ this.state.modalIsOpen }\n          onRequestClose={ this.closeModal }\n          className={ `ModalContent` }\n          overlayClassName=\"ModalOverlay\">\n          <div className=\"RulesModal\">\n            <div className=\"title\">Rules</div>\n            <ul>\n              <li>\n                <div>Each player begins with an identical set of cards.</div>\n                <div>Creature cards have two attributes:</div>\n                <ol>\n                  <li>Power: 1, 2, or 3</li>\n                  <li>Element: Wood, Fire, or Water</li>\n                </ol>\n                <div>There are also 2 special cards:</div>\n                <ol>\n                  <li>PACEHM card voids all results in a round</li>\n                  <li>SILVRA card has a power of 3, but no elemental compatibility bonus</li>\n                </ol>\n              </li>\n              <li><div>At the start of the game decks are shuffled and each player draws 4 cards. Cards in hand are always face up.</div></li>\n              <li><div>Each round, players pick a card. Picks are revealed simultaneously.</div>\n                <div className=\"divider top\"></div>\n                <dl>\n                  <dt>Score Calculations</dt>\n                  <dd><p className=\"calculation1\"><span className=\"power\">Attack Power</span><span className=\"plus\">+</span><span className=\"bonus\">Elemental Compatibility Bonus</span></p></dd>\n                </dl>\n                <div className=\"calculations\">\n                  <div className=\"calculation2\">\n                    <div className=\"description\">\n                      <div>Attack Power</div>\n                      <div>The attack value shown on the Card</div>\n                    </div>\n                  </div>\n                  <div className=\"calculation3\">\n                    <div className=\"description\">\n                      <div>Elemental Compatibility Bonus</div>\n                      <div>Player will gain 1 extra score when the player card's element type is stronger than the opponent's (Fire > Wood > Water > Fire > etc.). For Special Card 2 (SILVRA), no Elemental Compatibility Bonus is added</div>\n                    </div>\n                  </div>\n                  <div className=\"calculation4\">\n                    <div className=\"description\">\n                      <div>Special Card 1 (PACEHM)</div>\n                      <div>This special 0 Attack Power card voids all results in a round</div>\n                    </div>\n                  </div>\n                  <div className=\"calculation5\">\n                    <div className=\"description\">\n                      <div>Special Card 2 (SILVRA)</div>\n                      <div>This special 3 Attack Power card removes elemental compatibility bonus in a round</div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"divider bottom\"></div>\n              </li>\n              <li><div>The player with a higher score wins the round. The losing player loses HP equal to the difference in scores. For example, if Player A has a score of 3 and Player B has a score of 1, Player B will lose 2 HP.</div></li>\n              <li>\n                <div>The game ends when:</div>\n                <ol>\n                  <li>A player has 0 or less HP. This player is the loser.</li>\n                  <li>All cards are played. The winner will be the player with the highest life total. If life totals are the same, the AI player wins.</li>\n                </ol>\n              </li>\n            </ul>\n          </div>\n          <div onClick={ this.closeModal }><i className=\"ButtonClose\">Close</i></div>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default RulesModal;\n","import './RulesModal.css';\nimport RulesModal from './RulesModal';\nexport default RulesModal;\n","import './GameInfo.css';\nimport GameInfo from './GameInfo';\nexport default GameInfo;\n","import React, { Component } from 'react';\n// Components\nimport { Button } from 'components';\n// Game subcomponents\nimport { RulesModal } from './components';\n\nclass Info extends Component {\n  render() {\n    // Extract data and event functions from props\n    const { className, deckCardCount, handCardCount, onEndGame } = this.props;\n    // Display:\n    // Round number: 18 <-- ((max deck = 17) + 1) - Deck Cards - Hand Cards\n    // Rules button to trigger a modal\n    // Button to end the current game\n    return (\n      <div className={`Info${ className ? ' ' + className : '' }`}>\n        { <p>ROUND <span className=\"round-number\">{ 18 - deckCardCount - handCardCount }/17</span></p> }\n        <RulesModal />\n        <div><Button onClick={ onEndGame } className=\"small red\">QUIT</Button></div>\n      </div>\n    )\n  }\n}\n\nexport default Info;\n","import './GameMat.css';\nimport GameMat from './GameMat';\nexport default GameMat;\n","import React, { Component } from 'react';\n// Game subcomponents\nimport { HandCards, PlayerInfo } from '../';\n\nclass GameMat extends Component {\n  render() {\n    // Extract data and event functions from props\n    const { className, deckCardCount,\n            aiLife, aiHandCards, aiName,\n            playerLife, playerHandCards, playerName,\n            onPlayCard } = this.props;\n\n    // Display the GameMat as a table with 2 rows\n    // The 1st row is AI (`PlayerInfo`, Deck card, `HandCards`)\n    // The 2nd row is Player (`PlayerInfo`, Deck card, `HandCards`)\n    return (\n      <table className={`GameMat${ className ? ' ' + className : '' }`}>\n        <tbody>\n          <tr>\n            <td className=\"mat mat-ai\">\n              <PlayerInfo\n                className=\"ai\"\n                name={ aiName }\n                life={ aiLife }\n              />\n              <div className={`deck ai remain${deckCardCount}`}>\n                { aiName }'S Deck ({ deckCardCount })\n              </div>\n              <HandCards\n                className=\"ai\"\n                cards={ aiHandCards }\n              />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"mat mat-player\">\n              <PlayerInfo\n                className=\"player\"\n                name={ playerName }\n                life={ playerLife }\n              />\n              <div className={`deck player remain${deckCardCount}`}>\n                { playerName }'S Deck ({ deckCardCount })\n              </div>\n              <HandCards\n                className=\"player\"\n                cards={ playerHandCards }\n                onPlayCard={ onPlayCard }\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nexport default GameMat;\n","import './HandCards.css';\nimport HandCards from './HandCards';\nexport default HandCards;\n","import React, { Component } from 'react';\n// Game subcomponents\nimport { Card } from \"../\";\n\nclass HandCards extends Component {\n  render() {\n    // Extract data and event functions from props\n    const { className, cards, onPlayCard } = this.props;\n\n    // function in render for generating `Card`s\n    const generateCards = cards => {\n      let elems = [];\n      // Hard coded 4 as the max of loop as every user has 4 hand cards\n      for (let i = 0; i < 4; ++i) {\n        // Prepare properties for `Card`\n        let cardProperties = {\n          key: i,\n          cardId: cards[i]\n        };\n        // If onPlayCard function is set, bind it with the onClick event of `Card`\n        if (onPlayCard) {\n          cardProperties.onClick = () => { onPlayCard(i) };\n        }\n        // Put the `Card` to `elems` array\n        elems.push(<Card { ...cardProperties } />);\n      }\n      return elems;\n    };\n\n    return (\n      <div className={`HandCards${ className ? ' ' + className : '' }`}>\n        { generateCards(cards) }\n      </div>\n    )\n  }\n}\n\nexport default HandCards;\n","import './PlayerInfo.css';\nimport PlayerInfo from './PlayerInfo';\nexport default PlayerInfo;\n","import React, { Component } from 'react';\n\nclass PlayerInfo extends Component {\n  render() {\n    // Extract data from props\n    const { className, name, life } = this.props;\n\n    // Display name of the Player / AI according to props,\n    //         hearts, by generateHearts function\n    //         life in text, show 0 if it is negative\n    return (\n      <div className={`PlayerInfo${ className ? ' ' + className : '' }`}>\n        <div className=\"name\">{ name }</div>\n        <div className={`life life${ life }`}></div>\n        <div className=\"lifepoints\">{ life < 0 ? 0 : life }/5</div>\n      </div>\n    )\n  }\n}\n\nexport default PlayerInfo;\n","import './PlayerProfile.css';\nimport PlayerProfile from './PlayerProfile';\nexport default PlayerProfile;\n","import React, { Component } from 'react';\n// Components\nimport { Button } from 'components';\n\nclass PlayerProfile extends Component {\n  render() {\n    // Extract data and event functions from props\n    const { name, winCount, lostCount, onStartGame } = this.props;\n\n    // Display welcome message,\n    //         buttons for login / start game,\n    //         number of winning and losing\n    return (\n      <div className=\"PlayerProfile\">\n        <div className=\"title\">Elemental Battles - powered by EOSIO</div>\n        <div className=\"welcome\">\n          <span>Welcome</span>\n        </div>\n        <div className=\"username\">\n          <span>{ name }</span>\n        </div>\n        <div className=\"record\">\n          <p>Your Current Record</p>\n          <span>Win <span className=\"count\">{ winCount }</span></span>\n          <span> | </span>\n          <span>Lost <span className=\"count\">{ lostCount }</span></span>\n        </div>\n        <div className=\"buttons\">\n          <Button onClick={ onStartGame } className=\"green\">START</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PlayerProfile;\n","import './Resolution.css';\nimport Resolution from './Resolution';\nexport default Resolution;\n","import React, { Component } from 'react';\n// Components\nimport { Button } from 'components';\n// Game subcomponents\nimport { Card } from '../';\n\nclass Resolution extends Component {\n  render() {\n    // Extract data and event functions from props\n    const { aiCard, aiName, aiLost,\n            playerCard, playerName, playerLost,\n            status, onNextRound, onEndGame } = this.props;\n\n    // Flag to indicate if the resolution screen should be shown\n    // By checking if aiSelectCard is not empty\n    const isCardSelected = aiCard > 0;\n\n    // Store the result of each round and decide where to put the \"WIN\" or \"DRAW\"\n    let aiRoundResult = \"\";\n    let playerRoundResult = \"\";\n    if (aiLost === 0 && playerLost === 0) {\n      aiRoundResult = \"DRAW\";\n      playerRoundResult = \"DRAW\";\n    } else if (aiLost === 0) {\n      aiRoundResult = \"WIN\";\n      playerRoundResult = <span>- { playerLost }</span>;\n    } else {\n      aiRoundResult = <span>- { aiLost }</span>;\n      playerRoundResult = \"WIN\";\n    }\n\n    // If state === 1, display \"YOU WIN!\" (player wins)\n    // If state === -1, display \"YOU LOST!\" (player loses)\n    // And display: 1 div for left selected card\n    //              1 div for showing VS text\n    //              1 div for right selected card\n    // And put the buttons for next round or end game\n    return (\n      <div className={`Resolution${ isCardSelected ? \" card-selected\" : \"\" }`}>\n        <div>\n          { status === 1 && <div className=\"result win\">VICTORY</div> }\n          { status === -1 && <div className=\"result lost\">DEFEATED</div> }\n          <div className=\"player\">\n            <p className=\"round-result\">{ isCardSelected && playerRoundResult }</p>\n            <Card cardId={ playerCard } />\n            <p className=\"name\">{ playerName }</p>\n          </div>\n          <div className=\"vs\">{ \"VS\" }</div>\n          <div className=\"ai\">\n            <p className=\"round-result\">{ isCardSelected && aiRoundResult }</p>\n            <Card cardId={ aiCard } />\n            <p className=\"name\">{ aiName }</p>\n          </div>\n          <div className=\"buttons\">\n            { isCardSelected && status === 0 &&\n                <Button onClick={ onNextRound }>NEXT ROUND</Button> }\n            { isCardSelected && status !== 0 &&\n                <Button onClick={ onEndGame } className=\"red\">QUIT</Button> }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Resolution;\n","// React core\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Game subcomponents\nimport { GameInfo, GameMat, PlayerProfile, Resolution } from './components';\n// Services and redux action\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass Game extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // State for showing/hiding components when the API (blockchain) request is loading\n    this.state = {\n      loading: true,\n    };\n    // Bind functions\n    this.loadUser = this.loadUser.bind(this);\n    this.handleStartGame = this.handleStartGame.bind(this);\n    this.handlePlayCard = this.handlePlayCard.bind(this);\n    this.handleNextRound = this.handleNextRound.bind(this);\n    this.handleEndGame = this.handleEndGame.bind(this);\n    // Call `loadUser` before mounting the app\n    this.loadUser();\n  }\n\n  // Get latest user object from blockchain\n  loadUser() {\n    // Extract `setUser` of `UserAction` and `user.name` of UserReducer from redux\n    const { setUser, user: { name } } = this.props;\n    // Send request the blockchain by calling the ApiService,\n    // Get the user object and store the `win_count`, `lost_count` and `game_data` object\n    return ApiService.getUserByName(name).then(user => {\n      setUser({\n        win_count: user.win_count,\n        lost_count: user.lost_count,\n        game: user.game_data,\n      });\n      // Set the loading state to false for displaying the app\n      this.setState({ loading: false });\n    });\n  }\n\n  handleStartGame() {\n    // Send a request to API (blockchain) to start game\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.startGame().then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  handlePlayCard(cardIdx) {\n    // Extract `user.game` of `UserReducer` from redux\n    const { user: { game } } = this.props;\n    // If it is an empty card, not going to do anything\n    if (game.hand_player[cardIdx] === 0) {\n      return;\n    }\n    // Show the loading indicator if the connection took too long\n    this.setState({ loading: true });\n    // Send a request to API (blockchain) to play card with card index\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.playCard(cardIdx).then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  handleNextRound() {\n    // Send a request to API (blockchain) to trigger next round\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.nextRound().then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  handleEndGame() {\n    // Send a request to API (blockchain) to end the game\n    // And call `loadUser` again for react to render latest game status to UI\n    return ApiService.endGame().then(()=>{\n      return this.loadUser();\n    });\n  }\n\n  render() {\n    // Extract data from state and user data of `UserReducer` from redux\n    const { loading } = this.state;\n    const { user: { name, win_count, lost_count, game } } = this.props;\n\n    // Flag to indicate if the game has started or not\n    // By checking if the deckCard of AI is still 17 (max card)\n    const isGameStarted = game && game.deck_ai.length !== 17;\n\n    // If game hasn't started, display `PlayerProfile`\n    // If game has started, display `GameMat`, `Resolution`, `Info` screen\n    return (\n      <section className={`Game${ (loading ? \" loading\" : \"\") }`}>\n        { !isGameStarted ?\n            <PlayerProfile\n              name={ name }\n              winCount={ win_count }\n              lostCount={ lost_count }\n              onLogout={ this.handleLogout }\n              onStartGame={ this.handleStartGame }\n            />\n          :\n            <div className=\"container\">\n              <GameMat\n                deckCardCount={ game.deck_ai.length }\n                aiLife={ game.life_ai }\n                aiHandCards={ game.hand_ai }\n                aiName=\"COMPUTER\"\n                playerLife={ game.life_player }\n                playerHandCards={ game.hand_player }\n                playerName={ name }\n                onPlayCard={ this.handlePlayCard }\n              />\n              <Resolution\n                status={ game.status }\n                aiCard={ game.selected_card_ai }\n                aiName=\"COMPUTER\"\n                aiLost={ game.life_lost_ai }\n                playerCard={ game.selected_card_player }\n                playerName={ name }\n                playerLost={ game.life_lost_player }\n                onNextRound={ this.handleNextRound }\n                onEndGame={ this.handleEndGame }\n              />\n              <GameInfo\n                deckCardCount={ game.deck_ai.length }\n                handCardCount={ game.hand_ai.filter( x => x > 0 ).length }\n                onEndGame={ this.handleEndGame }\n              />\n            </div>\n        }\n        {\n          isGameStarted && loading &&\n          <div className=\"spinner\">\n            <div className=\"image\"></div>\n            <div className=\"circles\">\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n              <div className=\"circle\">\n                <div className=\"inner\"></div>\n              </div>\n            </div>\n          </div>\n        }\n      </section>\n    )\n  }\n\n}\n\n// Map all state to component props (for redux to connect)\nconst mapStateToProps = state => state;\n\n// Map the following action to props\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser,\n};\n\n// Export a redux connected component\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import './Game.css';\nimport Game from './Game';\nexport default Game;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// Components\nimport { Button } from 'components';\n// Services and redux action\nimport { UserAction } from 'actions';\nimport { ApiService } from 'services';\n\nclass Login extends Component {\n\n  constructor(props) {\n    // Inherit constructor\n    super(props);\n    // State for form data and error message\n    this.state = {\n      form: {\n        username: '',\n        key: '',\n        error: '',\n      },\n      isSigningIn: false,\n    }\n    // Bind functions\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Runs on every keystroke to update the React state\n  handleChange(event) {\n    const { name, value } = event.target;\n    const { form } = this.state;\n\n    this.setState({\n      form: {\n        ...form,\n        [name]: value,\n        error: '',\n      },\n    });\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  // Handle form submission to call api\n  handleSubmit(event) {\n    // Stop the default form submit browser behaviour\n    event.preventDefault();\n    // Extract `form` state\n    const { form } = this.state;\n    // Extract `setUser` of `UserAction` and `user.name` of UserReducer from redux\n    const { setUser } = this.props;\n    // Set loading spinner to the button\n    this.setState({ isSigningIn: true });\n    // Send a login transaction to the blockchain by calling the ApiService,\n    // If it successes, save the username to redux store\n    // Otherwise, save the error state for displaying the message\n    return ApiService.login(form)\n      .then(() => {\n        setUser({ name: form.username });\n      })\n      .catch(err => {\n        this.setState({ error: err.toString() });\n      })\n      .finally(() => {\n        if (this.isComponentMounted) {\n          this.setState({ isSigningIn: false });\n        }\n      });\n  }\n\n  render() {\n    // Extract data from state\n    const { form, error, isSigningIn } = this.state;\n\n    return (\n      <div className=\"Login\">\n        <div className=\"title\">Elemental Battles - powered by EOSIO</div>\n        <div className=\"description\">Please use the Account Name and Private Key generated in the previous page to log into the game.</div>\n        <form name=\"form\" onSubmit={ this.handleSubmit }>\n          <div className=\"field\">\n            <label>Account name</label>\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={ form.username }\n              placeholder=\"All small letters, a-z, 1-5 or dot, max 12 characters\"\n              onChange={ this.handleChange }\n              pattern=\"[\\.a-z1-5]{2,12}\"\n              required\n            />\n          </div>\n          <div className=\"field\">\n            <label>Private key</label>\n            <input\n              type=\"password\"\n              name=\"key\"\n              value={ form.key }\n              onChange={ this.handleChange }\n              pattern=\"^.{51,}$\"\n              required\n            />\n          </div>\n          <div className=\"field form-error\">\n            { error && <span className=\"error\">{ error }</span> }\n          </div>\n          <div className=\"bottom\">\n            <Button type=\"submit\" className=\"green\" loading={ isSigningIn }>\n              { \"CONFIRM\" }\n            </Button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\n// Map all state to component props (for redux to connect)\nconst mapStateToProps = state => state;\n\n// Map the following action to props\nconst mapDispatchToProps = {\n  setUser: UserAction.setUser,\n};\n\n// Export a redux connected component\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import './Login.css';\nimport Login from './Login';\nexport default Login;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { App } from 'components';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}